module.exports = 'precision highp float;\n#define ambientRatio 0.5\n#define diffuseRatio 0.4\n#define specularRatio 0.1\nattribute vec4 a_color; \nattribute vec4 a_idColor;\nattribute vec2 faceUv;\nattribute vec3 a_shape;\nattribute vec3 a_size;\nuniform float u_zoom;\nvarying vec2 v_texCoord;\nvarying  vec4 v_color;\nvarying float v_lightWeight;\nvarying float v_size;\n\nvoid main() {\n   float scale = pow(2.0,(20.0 - u_zoom));\n  mat4 matModelViewProjection = projectionMatrix * modelViewMatrix;\n  vec3 newposition =  position;\n   #ifdef SHAPE \n    newposition =position + a_size * scale* a_shape;\n  #endif\n   v_texCoord = faceUv;\n  if(normal == vec3(0.,0.,1.)){\n     v_color = a_color;\n     gl_Position =  matModelViewProjection  * vec4(newposition, 1.0);\n     return;\n  }\n  \n  vec3 worldPos = vec3(vec4(newposition,1.0) * modelMatrix);\n  vec3 worldNormal = vec3(vec4(normal,1.0) * modelMatrix);\n  // //cal light weight\n  vec3 viewDir = normalize(cameraPosition - worldPos);\n  //vec3 lightDir = normalize(vec3(1, -10.5, 12));\n  vec3 lightDir = normalize(vec3(0.,-10.,1.));\n  vec3 halfDir = normalize(viewDir+lightDir);\n  // //lambert\n  float lambert = dot(worldNormal, lightDir);\n    //specular\n  float specular = pow( max(0.0, dot(worldNormal, halfDir)), 32.0);\n    //sum to light weight\n  float lightWeight = ambientRatio + diffuseRatio * lambert + specularRatio * specular;\n  v_texCoord = faceUv;\n  v_lightWeight = lightWeight;\n  // v_size = a_size;\n  v_color =vec4(a_color.rgb*lightWeight, a_color.w); \n  gl_Position =  matModelViewProjection * vec4(newposition, 1.0);\n}';